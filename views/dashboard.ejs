<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="utf-8">
  <meta content="width=device-width, initial-scale=1.0" name="viewport">

  <title>Dashboard - DAT</title>


  <!-- Google Fonts -->
  <link href="https://fonts.gstatic.com" rel="preconnect">
  <link
    href="https://fonts.googleapis.com/css?family=Open+Sans:300,300i,400,400i,600,600i,700,700i|Nunito:300,300i,400,400i,600,600i,700,700i|Poppins:300,300i,400,400i,500,500i,600,600i,700,700i"
    rel="stylesheet">
    

  
  <link rel="stylesheet" href="/Bootstrap/bootstrap/css/bootstrap.min.css" >
  <link rel="stylesheet" href="/Bootstrap/bootstrap-icons/bootstrap-icons.css" >
  <link rel="stylesheet" href="/Bootstrap/boxicons/css/boxicons.min.css">
  

  <!-- Main CSS File -->
  <link rel="stylesheet" href="/css/style.css">
  
  <style>
    .card-container {
  display: flex;
  overflow-x: auto;
  
  gap: 1rem;
}
.bg-m-dblue {
  background-color: #007bff;
}

.bg-m-gray {
  background-color: #6c757d;
}

.bg-m-orange {
  background-color: #fd7e14;
}
#fetchDataButton {
  padding: 5px 10px;
  font-size: 12px;
 
  background-color: transparent;
  border:  1px solid #6c757d;
  color: black; /* Text color */
}

.card-container .card1 {
  min-width: 250px; /* Adjust the width of each card */
  flex: 0 0 auto;
}

.card1 {
  background-color: #2a2a72;
  border-radius: 15px;
  color: #fff;
  
  margin: 1rem 0;
}

.card-block {
  padding: 1rem;
}
.custom-btn {
  padding: 5px 10px; /* Adjust padding for size */
  font-size: 14px; /* Adjust font size */
  background-color:  transparent; /* Transparent background */
  border: 1px solid  #2a2a72; /* Black border */
  border-radius: 50px; /* Circular border */
  color: black; /* Text color */
   
  
}

.custom-btn:hover {
  background-color:  #2a2a72; /* Change background color on hover */
  color: white; /* Change text color on hover */
}
  </style>
</head>

<body>


  
  <!-- ======= Header ======= -->
  <%- include("templates/header.ejs") %>
  <!--======= SideBar =======-->
  <%- include("templates/sidebar.ejs") %>


  <main id="main" class="main">

    <div class="pagetitle">
      <h1><%= userRole %> Dashboard</h1>
    </div><!-- End Page Title -->

    <section class="section dashboard">

      <!--Attendance cards-->
      
        <div id="cardContainer" class="card-container mt-3"></div>
    
      <!--Attendance cards-->
      
      
      
     <div class="row">

        <!-- Line Chart -->
        <div class="col-lg-8">
          <div class="card">
            <div class="card-body">
              <Form id="dataForm">
              <div class="card-dropdowns" style="display: flex; justify-content: space-between;">
                <h5 class="card-title">Students Count</h5>
            
                <div class="card-options">
                  <select id="yearDropdown" style="height: 30px; margin-top: 10px; font-size: 14px;">
                    <option hidden selected disabled value="null">Year</option>
                    <option value="2">2</option>
                    <option value="3">3</option>
                  </select>
                </div>
            
                <div class="card-options">
                  <select id="sectionDropdown" style="height: 30px; margin-top: 10px; font-size: 14px;">
                    <option hidden selected disabled value="null">Section</option>
                    
                      <option value="CSIT 1">CSIT 1</option>
                      <option value="CSIT 2">CSIT 2</option>
                      <option value="CSIT 3">CSIT 3</option>
                  </select>
                </div>
              </div>
            </Form>
            
              <button id="fetchDataButton" style="margin-top: 10px;">Fetch Data</button>
            
              <canvas id="lineChart" style="max-height: 550px;"></canvas>
              <script>
                document.addEventListener("DOMContentLoaded", () => {
                  const yearDropdown = document.getElementById('yearDropdown');
                  const sectionDropdown = document.getElementById('sectionDropdown');
                  const fetchDataButton = document.getElementById('fetchDataButton');
                  let lineChartInstance = null;
              
                  function fetchData() {
                    const year = yearDropdown.value;
                    const section = sectionDropdown.value;
                    if (year && section) {
                      fetch(`/weeklyattendance/getWeeklyAttendanceCount?year=${year}&section=${section}`)
                        .then(response => response.json())
                        .then(data => {
                          console.log(data);
                          const labels = Object.keys(data);
                          const counts = Object.values(data);
              
                          // Destroy the previous chart instance if it exists
                          if (lineChartInstance) {
                            lineChartInstance.destroy();
                          }
              
                          // Create a new chart instance
                          const ctx = document.querySelector('#lineChart').getContext('2d');
                          lineChartInstance = new Chart(ctx, {
                            type: 'line',
                            data: {
                              labels: labels,
                              datasets: [{
                                label: 'Count',
                                data: counts,
                                fill: true,
                                borderColor: 'rgb(75, 192, 192)',
                                tension: 0.1
                              }]
                            },
                            options: {
                              scales: {
                                x: {
                                  ticks: {
                                    stepSize: 10 // Set step size for x-axis ticks
                                  }
                                },
                                y: {
                                  beginAtZero: true
                                }
                              }
                            }
                          });
                        });
                    }
                  }
              
                  // Call fetchData on page load with default values
                  fetchData();
              
                  // Attach click event listener to fetchDataButton
                  fetchDataButton.addEventListener('click', fetchData);
              
                });
              </script>
              
              <!-- End Line Chart -->
            </div>
            
          </div>
       
        
        </div>


          <!--Calendar-->
          <div class="col-2">
            <div class="card">
              <div class="contianer">
                <div class="calendar">
                  <div class="calendar-header">
                    <span class="month-picker" id="month-picker"> May </span>
                    <div class="year-picker" id="year-picker">
                      <span class="year-change" id="pre-year">
                        <pre></pre>
                      </span>
                      <span id="year">2020 </span>
                      <span class="year-change" id="next-year">
                        <pre>></pre>
                      </span>
                    </div>
                  </div>
           
                  <div class="calendar-body">
                    <div class="calendar-week-days">
                      <div>Sun</div>
                      <div>Mon</div>
                      <div>Tue</div>
                      <div>Wed</div>
                      <div>Thu</div>
                      <div>Fri</div>
                      <div>Sat</div>
                    </div>
                    <div class="calendar-days">
                    </div>
                  </div>
                  <div class="calendar-footer">
                  </div>
                  <div class="date-time-formate">
                    <div class="day-text-formate">TODAY</div>
                    <div class="date-time-value">
                      <div class="time-formate">02:51:20</div>
                      <div class="date-formate">23 - july - 2022</div>
                    </div>
                  </div>
                  <div class="month-list"></div>
                
            </div></div>
            
          
            <script>
          const isLeapYear = (year) => {
            return (year % 4 === 0 && year % 100 !== 0) || year % 400 === 0;
          };
          
          const getFebDays = (year) => {
            return isLeapYear(year) ? 29 : 28;
          };
          
          let calendar = document.querySelector('.calendar');
          const month_names = [
            'Monday',
            'Tuesday',
            'Wednesday',
            'Thursday',
            'Friday',
          ];
          let month_picker = document.querySelector('#month-picker');
          const dayTextFormate = document.querySelector('.day-text-formate');
          const timeFormate = document.querySelector('.time-formate');
          const dateFormate = document.querySelector('.date-formate');
          
          month_picker.onclick = () => {
            month_list.classList.remove('hideonce');
            month_list.classList.remove('hide');
            month_list.classList.add('show');
            dayTextFormate.classList.remove('showtime');
            dayTextFormate.classList.add('hidetime');
            timeFormate.classList.remove('showtime');
            timeFormate.classList.add('hidetime');
            dateFormate.classList.remove('showtime');
            dateFormate.classList.add('hidetime');
          };
          
          const generateCalendar = (month, year) => {
            let calendar_days = document.querySelector('.calendar-days');
            calendar_days.innerHTML = '';
            let calendar_header_year = document.querySelector('#year');
            let days_of_month = [
              31,
              getFebDays(year),
              31,
              30,
              31,
              30,
              31,
              31,
              30,
              31,
              30,
              31,
            ];
          
            let currentDate = new Date();
          
            month_picker.innerHTML = month_names[month];
          
            calendar_header_year.innerHTML = year;
          
            let first_day = new Date(year, month, 1);
          
            for (let i = 0; i <= days_of_month[month] + first_day.getDay() - 1; i++) {
              let day = document.createElement('div');
          
              if (i >= first_day.getDay()) {
                day.innerHTML = i - first_day.getDay() + 1;
          
                if (
                  i - first_day.getDay() + 1 === currentDate.getDate() &&
                  year === currentDate.getFullYear() &&
                  month === currentDate.getMonth()
                ) {
                  day.classList.add('current-date');
                }
              }
              calendar_days.appendChild(day);
            }
          };
          
          let month_list = document.querySelector('.month-list');
          month_names.forEach((e, index) => {
            let month = document.createElement('div');
            month.innerHTML = `<div>${e}</div>`;
          
            month_list.append(month);
            month.onclick = () => {
              currentMonth.value = index;
              generateCalendar(currentMonth.value, currentYear.value);
              month_list.classList.replace('show', 'hideonce');
              dayTextFormate.classList.remove('hidetime');
              dayTextFormate.classList.add('showtime');
              timeFormate.classList.remove('hidetime');
              timeFormate.classList.add('showtime');
              dateFormate.classList.remove('hidetime');
              dateFormate.classList.add('showtime');
            };
          });
          
          (function () {
            month_list.classList.add('hideonce');
          })();
          
          document.querySelector('#pre-year').onclick = () => {
            currentYear.value--;
            generateCalendar(currentMonth.value, currentYear.value);
          };
          
          document.querySelector('#next-year').onclick = () => {
            currentYear.value++;
            generateCalendar(currentMonth.value, currentYear.value);
          };
          
          let currentDate = new Date();
          let currentMonth = { value: currentDate.getMonth() };
          let currentYear = { value: currentDate.getFullYear() };
          generateCalendar(currentMonth.value, currentYear.value);
          
          const todayShowTime = document.querySelector('.time-formate');
          const todayShowDate = document.querySelector('.date-formate');
          
          const currshowDate = new Date();
          const showCurrentDateOption = {
            year: 'numeric',
            month: 'long',
            day: 'numeric',
            weekday: 'long',
          };
          const currentDateFormate = new Intl.DateTimeFormat(
            'en-US',
            showCurrentDateOption
          ).format(currshowDate);
          todayShowDate.textContent = currentDateFormate;
          
          setInterval(() => {
            const timer = new Date();
            const option = {
              hour: 'numeric',
              minute: 'numeric',
              second: 'numeric',
            };
            const formateTimer = new Intl.DateTimeFormat('en-us', option).format(timer);
            let time = `${timer.getHours().toString().padStart(2, '0')}:${timer.getMinutes().toString().padStart(2, '0')}:${timer.getSeconds().toString().padStart(2, '0')}`;
            todayShowTime.textContent = formateTimer;
          }, 1000);
          
            </script>

            </div>

          </div>
        </div>
       
      </div>
       
   
      
    </section>

  </main><!-- End #main -->

  <!-- ======= Footer ======= -->
  

  <a href="#" class="back-to-top d-flex align-items-center justify-content-center"><i
      class="bi bi-arrow-up-short"></i></a>
   <!-- JS Files -->
   <script src="/apexcharts/apexcharts.min.js"></script>
   <script src="/Bootstrap/bootstrap/js/bootstrap.bundle.min.js"></script>
   <script src="/Bootstrap/chart.js/chart.umd.js"></script>
  
 
   <!-- Template Main JS File -->
   <script src="/js/main.js"></script>
   <script>
 async function retrieveAttendanceData() {
  try {
    const response = await fetch(`/fetchAttendanceData`);
    const data = await response.json();
    const cardContainer = document.getElementById('cardContainer');
    cardContainer.innerHTML = '';

    const colors = ['bg-m-dblue', 'bg-m-gray', 'bg-m-orange'];

    data.forEach((item, index) => {
      const cardDiv = document.createElement('div');
      cardDiv.classList.add('col-md-5', 'col-xl-3');

      const colorClass = colors[index % colors.length]; // Choose color alternatively

      const cardContent = `
        <div class="card1 ${colorClass} order-card m-round">
          <div class="card-block">
            <h6 class="m-b-0">${item.section}<span class="f-right" style='font-size:medium'>${item.year}</span></h6>
            <br>
            <h6 class="m-b-0">Subject: <span style='font-size:small'>${item.subject}</span></h6>
            <br>
            <h6 class="m-b-0">Total count<span class="f-right">${item.totalcount}</span></h6>
            <h6 class="m-b-0">Present <span class="f-right">${item.presentcount}</span></h6>
            <h6 class="m-b-0">Bunk <span class="f-right">${item.bunk}</span></h6>
          </div>
        </div>
      `;
      cardDiv.innerHTML = cardContent;
      cardContainer.appendChild(cardDiv);
    });

  } catch (error) {
    console.error('Error fetching attendance data:', error);
  }
}

// Execute the function on page load
document.addEventListener('DOMContentLoaded', () => {
  retrieveAttendanceData();
});

</script>
 </body>
 
 </html>     
